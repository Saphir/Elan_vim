#!/bin/bash

function git_st()
{
    var_git_st=$(git status -s -b -uno 2>&1)
    if [[ $var_git_st =~ ^fatal ]]
    then
        echo ""
    else
        echo "$var_git_st" | sed -n '1s/^## \(.*\)/ (\1)/p'
    fi
    unset var_git_st
}
function sss() # screen
{
    if [[ $# -eq 1 && ! $1 =~ ^-.* ]]
    then
        /usr/local/bin/screen-4.6.2 -S $1 -t $1
    else
        /usr/local/bin/screen-4.6.2 $@
    fi
}
function _ps()
{
    if [[ $# -eq 0 ]]
    then
        ps axjf | less
    else
        ps "$@"
    fi
}
alias ps='_ps'
function ggg() {
    if [ "$1" == "-h" -o "$1" == "--help" ]
    then
        cat << EOF
Usage:
    ${FUNCNAME[0]} c [-D NDEBUG] -- compile *.cxx *.hxx in current path
    ${FUNCNAME[0]} e -- vi *.cxx *.hxx in current path
EOF
    return 1
    fi
    files=$(find * -maxdepth 0 -name "*.hxx" -o -name "*.cxx" -o -name "*.hpp" -o -name "*.cpp" |xargs)
    cmd="g++ -std=c++11 ${@:+$@ }${files} -o a.out"
    echo "[CMD] $cmd"
    eval $cmd
    [[ $? == 0 ]] && ./a.out
}
function gge() {
    files=$(find * -maxdepth 0 -name "*.cxx" -o -name "*.hxx" -o -name "*.hpp" -o -name "*.cpp" |xargs)
    vim $files
}
#function _mkdir_cd() {
#    mkdir $@ && cd $1
#}
#alias mkdir='_mkdir_cd'
function ctouch()
{
    dd if=/dev/urandom of=$1 bs=1M count=1 status=none
}
WPATHS=(\
/home/c4dev/zhw/emc_zhengh3
/home/c4dev/go/src
/c4_working/git_workspace
/c4site/SOBO/Public/zhengh3
/home/c4dev/apache/htdocs/links
/home2/work_spaces/AutoX_Git
/c4_working/etwas_logs
/home/c4dev/zhw/c++
)
function cdd()
{
    if [ -n "$1" ]
    then
        if [ -d "$1" ]
        then
            pushd $1
        else
            echo ${WPATHS[$1-1]}
            pushd ${WPATHS[$1-1]}
        fi
    else
        local n=1
        for p in ${WPATHS[*]}
        do
            echo "$n. $p"
            let n++
        done
        local num=0
        while [[ $num -eq 0 || $num -gt ${#WPATHS[@]} ]]
        do
            echo -n "Dest: "
            read num
        done
        pushd ${WPATHS[$num-1]}
    fi
}
grepktrace ()
{
    rc=1
        if [ -z "$1" ]; then
            echo "Usage: grepc4log <pattern>";
    return 1;
    fi;
    pattern="$@";
    while read f; do
        zgrep "${pattern}" $f;
    lastrc="$?"
        [ "$rc" -eq 0 ] || rc="$lastrc"
        [ "$lastrc" -eq 0 ] && echo "<<< @ $f"
        done < <(ls -rt c4_safe_ktrace.log*);
    return "$rc"
}
function getLocalIP()
{
    defaultgwdev=$(ip route | grep default | awk '{print $5}')
    localnet=$(ip addr show dev $defaultgwdev | grep 'inet ' | awk '{print $2}')
    localip=$(echo $localnet | cut -d '/' -f 1)
    export _LOCALIP=$localip
    echo $localip
}
function httpServer()
{
cmd=$1
while :
do
    case "$cmd" in
    start)
        if sudo lsof -i :8050 | grep 8050; then
            return 0;
        fi
        echo "Starting python http server ..."
        python_http_server_links="${HOME}/HTTP.Server"
        [ ! -e "${python_http_server_links}" ] && mkdir -p ${python_http_server_links}
        (cd ${python_http_server_links};nohup python3 -m http.server 8050 > /tmp/python.http.server.log 2>&1 &)
        return 0
        ;;
    stop)
        echo "Stoping python http server ... "
        sudo lsof -i :8050 | grep 8050
        if [ "$?" -ne 0 ]; then
            echo "python http service not running ..."
        else
            server_pid=$(sudo lsof -i :8050 | grep 8050 | awk '{print $2}')
            [ -n "$server_pid" ] && sudo kill -9 ${server_pid}
        fi
        return 0
        ;;
    status)
        sudo lsof -i :8050 | grep 8050
        [ "$?" -ne 0 ] && echo "python http service not running ..."
        return 0
        ;;
    *)
        read -p "[start|stop|status]" cmd
        ;;
    esac
done
}

function _notifyMe()
{
    t_pid=$1
    echo "monitor $t_pid ..."

    [ -z "$t_pid" ] && return 1

    if [ ! -d /proc/$t_pid ]
    then
        echo "$t_pid not found"
    else
        cmdline="$(cat -t /proc/$t_pid/cmdline | sed 's/\^@/ /g')"
        while test -d /proc/$t_pid
        do
            sleep 1
        done
        python3.6 /home/c4dev/zhw/emc_zhengh3/python/socket_notify.py "'$cmdline' DONE"
    fi
}

# ON_PROJECT
export ON_PROJECT='leetcode golang'
function _com_on()
{
    if [ -n "$ON_PROJECT" ]
    then
        local cur=${COMP_WORDS[COMP_CWORD]}
        COMPREPLY=( $(compgen -W "$ON_PROJECT" -- $cur) )
    fi
}
complete -F _com_on on
function on() {
    case "$1" in
    'leetcode')
        local _leetcode_path='/home/c4dev/zhw/emc_zhengh3/c++/leetcode'
        if [ -d "$_leetcode_path" ]; then
            bash --init-file <(echo 'source $HOME/.bashrc;\
                cd '"$_leetcode_path"';\
                export PS1="[on '"$1"']$PS1";\
                function cbuild() { \
                    g++ -std=c++1y "$@" Main.cpp;\
                };\
                function crun() { \
                    exefile=/tmp/C_build_$$;\
                    g++ -std=c++1y -o $exefile Main.cpp;\
                    [ $? -eq 0 ] && $exefile "$@";\
                    rc=$?;\
                    rm $exefile;\
                };\
                function leetcodeStart() { \
                    mkdir $1 || return $?;\
                    cp leetcode_start $1/$1.cpp || return $?;\
                    [ -L Main.cpp ] && (rm Main.cpp || return $?);\
                    ln -s $1/$1.cpp Main.cpp || return $?;\
                };\
                function leetcodeOn() { \
                    [ -L Main.cpp ] && (rm Main.cpp || return $?);\
                    ln -s $1/$1.cpp Main.cpp || return $?;\
                }'\
            )
        fi;;
    'golang')
        local _golang_path='/home/c4dev/go/src'
        if [ -d "$_golang_path" ]; then
            bash --init-file <(echo 'source $HOME/.bashrc;\
                cd '"$_golang_path"';\
                export PS1="[on '"$1"']$PS1";\')
        else
            echo "[ERROR] '$_golang_path' not exist."
        fi;;
    '*')
        echo "Unknown option `$1`";;
    esac
}

function httpserver() {
    local _port=${1:-8888}
    python3 -m http.server ${_port}
}

